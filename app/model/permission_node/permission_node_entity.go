// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package permission_node

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table permission_node.
type Entity struct {
    Id        uint        `orm:"id,primary" json:"id"`         //                            
    Name      string      `orm:"name"       json:"name"`       // 节点名称                   
    Label     string      `orm:"label"      json:"label"`      // 节点标签                   
    Method    string      `orm:"method"     json:"method"`     // 节点操作类型               
    Path      string      `orm:"path"       json:"path"`       // 节点路径                   
    Status    uint        `orm:"status"     json:"status"`     // 节点状态 0：禁用  1：启用  
    Remark    string      `orm:"remark"     json:"remark"`     // 节点备注                   
    CreatedAt *gtime.Time `orm:"created_at" json:"created_at"` // 创建时间                   
    UpdatedAt *gtime.Time `orm:"updated_at" json:"updated_at"` // 更新时间                   
    DeletedAt *gtime.Time `orm:"deleted_at" json:"deleted_at"` //                            
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}