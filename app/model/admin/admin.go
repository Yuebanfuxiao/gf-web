// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package admin

import (
	"gf-web/app/model/role"
	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/net/ghttp"
	"github.com/gogf/gf/os/gtime"
	"github.com/gogf/gf/util/gconv"
)

// Fill with you ideas below.
const (
	// 禁用状态
	StatusDisabled = 0
	// 启用状态
	StatusEnabled = 1
)

type AdminRoles struct {
	Admin *Entity
	Roles []*role.Entity
}

// 创建处理器
func Creating(data g.Map, request ...*ghttp.Request) g.Map {
	var (
		ip  = ""
		now = gtime.Now()
	)

	if len(request) > 0 {
		ip = request[0].GetClientIp()
	}

	if status, ok := data["status"]; ok {
		data["status"] = gconv.Uint(status)
	} else {
		data["status"] = StatusDisabled
	}

	if registerAt, ok := data["register_at"]; ok {
		data["register_at"] = registerAt
	} else {
		data["register_at"] = now
	}

	if lastLoginAt, ok := data["last_login_at"]; ok {
		data["last_login_at"] = lastLoginAt
	} else {
		data["last_login_at"] = now
	}

	if registerIp, ok := data["register_ip"]; ok {
		data["register_ip"] = registerIp
	} else {
		data["register_ip"] = ip
	}

	if lastLoginIp, ok := data["last_login_ip"]; ok {
		data["last_login_ip"] = lastLoginIp
	} else {
		data["last_login_ip"] = ip
	}

	return data
}

func Updating(data g.Map) g.Map {
	return data
}
